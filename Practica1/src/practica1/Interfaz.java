/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica1;

import java.awt.List;
import java.util.ArrayList;
import sun.swing.MenuItemLayoutHelper;
import javax.swing.JOptionPane;

/**
 *
 * @author Wilfred
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField2.setText("jTextField2");

        jButton1.setText("Analizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Generar automata");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Abrir archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Guardar");
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar Como");
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Generar XML de salida");
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTextField2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(635, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        
        ArrayList<Token> lista = new ArrayList<Token>();
        ArrayList<ErrorToken> listaerror = new ArrayList<ErrorToken>();
        ArrayList<Error_Tokens> erroressintacticos = new ArrayList<Error_Tokens>();
        Sintactico parser;
        String texto= jTextArea1.getText();
        String[] analizar=texto.split("");
        int longitud = analizar.length;
        int estado=0;
        int cantidaderrores;
        int filav=0,columnah=0;
        String palabra="";
        
        //jTextArea1.setText("se preciono el boton");
        for(int i=0;i<longitud;i++){
            //JOptionPane.showInputDialog(analizar[i]);
            switch(estado){
                case 0:
                {
                //si es un corchete }}
                if(analizar[i].compareTo("}")==0){
                    estado=0;
                    columnah++;
                    
                    lista.add(new Token("TK_}",analizar[i],"Llaves de cierre",filav, columnah));
                    break;
                }
                //si es corchete {
                if(analizar[i].compareTo("{")==0)
                {
                    columnah++;
                    lista.add(new Token("TK_{",analizar[i],"Llave de apertura", filav,columnah));                   
                    break;
                }
                //si son dos puntos
                if(analizar[i].compareTo(":")==0){
                    columnah++;
                    lista.add(new Token("TK_:",analizar[i],"Dos puntos",filav, columnah));
                    break;
                }
                //si es una coma
                if(analizar[i].compareTo(",")==0){
                 columnah++;
                lista.add(new Token("TK_coma",analizar[i],"Coma",filav,columnah));
                break;
                }
                //si es un punto y coma
                if(analizar[i].compareTo(";")==0){
                columnah++;
                lista.add(new Token("TK_pcoma",analizar[i],"Punto y coma", filav,columnah));
                break;
                }
                //para punto .
                if(analizar[i].compareTo(".")==0){
                columnah++;
                lista.add(new Token("TK_punto",analizar[i],"Punto o concatenacion", filav,columnah));
                break;
                }
                //para signo de ?
                if(analizar[i].compareTo("?")==0){
                columnah++;
                lista.add(new Token("TK_?",analizar[i],"Interrogacion-operador logico ?", filav,columnah));
                break;
                }
                //si es una suma 
                if(analizar[i].compareTo("+")==0){
                    columnah++;
                    lista.add(new Token("TK_+",analizar[i],"signo de suma",filav,columnah));
                    break;
                }
                //si es un porcentaje
                if(analizar[i].compareTo("%")==0) {
                    columnah++;
                    //lista.add(new Token("TK_%",analizar[i],"Signo de porcentaje",filav,columnah));
                    break;
                    }
                //si es un *
                if(analizar[i].compareTo("*")==0)
                {
                    columnah++;
                    lista.add(new Token("TK_*",analizar[i],"Signo de multiplicacion",filav,columnah));
                    break;
                }
                //si es una linea de Ã± 126
                if(analizar[i].compareTo("~")==0){
                    columnah++;
                    lista.add(new Token("TK_~",analizar[i],"signo ~ ",filav,columnah));
                    break;
                }
                //para comentarios multininea <
                if(analizar[i].compareTo("<")==0){
                    columnah++;
                    palabra+=analizar[i];
                    estado=1;
                    break;
                }
                //si es una letra
                if(Character.isLetter(analizar[i].charAt(0))){
                    columnah++;
                    palabra+=analizar[i];
                    estado=2;
                    break;
                }
                //si son comillas dobles
                if(analizar[i].compareTo("\"")==0){
                    columnah++;
                    palabra+=analizar[i];
                    estado=3;
                    break;
                }
                //si es un digito
                if(Character.isDigit(analizar[i].charAt(0))){
                    columnah++;
                    palabra+=analizar[i];
                    estado=4;
                    break;
                }
                //para un comentario de una linea /
                if(analizar[i].compareTo("/")==0){
                    columnah++;
                    palabra+=analizar[i];
                    estado=13;
                    break;
                }
                //para el apuntado ->
                if(analizar[i].compareTo("-")==0){
                    palabra+=analizar[i];
                    columnah++;
                    estado =10;
                    break;
                }
                if(analizar[i].compareTo("|")==0){
                    columnah++;
                    lista.add(new Token("TK_|",analizar[i],"Operador o",filav,columnah));
                    break;
                }
                //saltos de linea
                if(analizar[i].compareTo("\n")==0)
                {
                    columnah=0;
                    filav++;
                    estado=0;
                    break;
                }
                //espacios en blanco
                if(analizar[i].compareTo(" ")==0){
                    columnah++;
                    estado=0;
                    break;
                }
                //tabulaciones
                if(analizar[i].compareTo("\t")==0){
                    columnah+=4;    
                    estado=0;
                    break;
                }
                else{
                    //JOptionPane.showInputDialog("El error es: "+analizar[i]);
                    columnah++;
                    listaerror.add(new ErrorToken(analizar[i], "Error lexico", filav, columnah));
                    break;
                }             
                //break;
                
                }//fin del estado 0
                
                
                case 1:{
                    //si es un !
                    if(analizar[i].compareTo("!")==0){
                    columnah++;
                    palabra+=analizar[i];
                    estado=6;
                    }
                break;
                }//fin del estado 1
                
                //sigue reconociendo letras y digitos hasta que dejen de llegar
                case 2:{
                    if(Character.isLetter(analizar[i].charAt(0))||Character.isDigit(analizar[i].charAt(0))){
                        palabra+=analizar[i];
                        columnah++;
                        break;
                    }
                    else{
                        if(palabra.compareTo("CONJ")==0){
                        lista.add(new Token("TK_conj",palabra,"Palabra reservada CONJ",filav,columnah));
                        
                        }
                        else{
                            lista.add(new Token("TK_id",palabra,"Identificador",filav,columnah));
                            
                        }
                    i--;
                    palabra="";
                    estado=0;
                    }
                    break;
                        
                    
                }
                //cualquier cosa dentro de las comillas
                case 3:{
                    if(analizar[i].compareTo("\"")==0){
                        i--;
                        estado=12;
                    }
                    else{
                        columnah++;
                        palabra+=analizar[i];
                        estado=3;
                    }
                    
                    break;
                }//fin del estado 3
                
                //para digitos
                case 4:{
                    if(Character.isDigit(analizar[i].charAt(0))){
                        palabra+=analizar[i];
                        columnah++;
                        estado=4;
                        break;
                    }
                    else{
                        lista.add(new Token("TK_num",palabra,"Numero",filav,columnah));
                        i--;
                        palabra="";
                        estado=0;
                    }
                    break;
                }
                
                
                //para capturar cualquier cosa
                case 6:{
                    //puede terminar el comentario multilinea
                    if(analizar[i].compareTo("!")==0){
                        columnah++;
                        palabra+=analizar[i];
                        estado=7;
                        break;
                    }
                    //si es un salto de linea
                    else if(analizar[i].compareTo("\n")==0){
                        columnah=0;
                        filav++;
                        palabra+=analizar[i];
                        estado=6;
                        break;
                    }
                    else{
                        columnah++;
                        palabra+=analizar[i];
                        estado=6;
                    }
                    
                    break;
                }//fin del estado 6
                
                
                //posible fin del comentario multilinea
                case 7:
                {
                    //> para terminar el comentario multilinea
                    if(analizar[i].compareTo(">")==0){
                    estado =9;
                    i--;
                    }
                    //si no es > entonces es otro caracter que lo vuelve a analizar en el estado 6
                    else{
                        estado=6;
                        i--;     
                    }
                    break;
                }//fin del estado 7
                
                case 8:
                {
                    break;
                }
                //aca aceptamos el comentario multilinea
                case 9:{
                    columnah++;
                    palabra+=analizar[i];
                    //lista.add(new Token("TK_comentario_multilinea",palabra,"Comentario multilinea",filav,columnah));
                    estado=0;
                    palabra="";
                    break;
                }
                case 10:{
                    if(analizar[i].compareTo(">")==0){
                        i--;
                        estado=11;
                        break;
                    }
                    
                    break;
                }
                
                case 11:{
                    columnah++;
                    palabra+=analizar[i];
                    lista.add(new Token("TK_apuntado",palabra,"apuntador",filav,columnah));
                    palabra="";
                    estado=0;
                    break;
                }
                //aca almacena las cadenas
                case 12:{
                    if(analizar[i].compareTo("\"")==0){
                        columnah++;
                        palabra+=analizar[i];
                        lista.add(new Token("TK_cadena",palabra,"Cadena de texto comillas dobles",filav,columnah));
                        palabra="";
                        estado=0;
                        break;
                    }
                    //break;
                }//fin del case 13
                
                case 13:{
                    //si viene otra /
                    if(analizar[i].compareTo("/")==0){
                    columnah++;
                    palabra+=analizar[i];
                    estado=14;
                    break;
                }
                    else {
                        i--;
                        lista.add(new Token("TK_/",palabra,"signo de divicion",filav,columnah));
                        palabra="";
                        estado=0;
                    }
                    break;
                }//fin del case 13
                
                case 14:{
                    //si es un salto de linea termina el comentario de una linea
                    if(analizar[i].compareTo("\n")==0){
                        columnah=0;
                        filav++;
                        //lista.add(new Token("TK_comentario",palabra,"Comentario de una linea",filav,columnah));
                        palabra="";
                        estado=0;
                        break;
                    }
                    else{
                        columnah++;
                        palabra+=analizar[i];
                        estado=14;
                        
                    }
                    
                    break;
                }//fin del case 14
                
                
                
                
                    
            
            
            }//fin del switch
        }//fin del analizador
        
        lista.add(new Token("fin","","",0,0));
        parser = new Sintactico();
        
        
        
        
        
        if(listaerror.isEmpty())
        {
            JOptionPane.showMessageDialog(rootPane, "No hay errores lexicos");
                for(int i=0;i<lista.size();i++){
                //JOptionPane.showInputDialog(lista.get(i).id_token);
                }
                cantidaderrores = parser.parser(lista);
                erroressintacticos = parser.errorsintactico();
                
                if(cantidaderrores>0){
                    JOptionPane.showInputDialog("Se encontraron errores sintacticos en el archivo");
                    for(int i=0;i<erroressintacticos.size();i++){
                        JOptionPane.showInputDialog(erroressintacticos.get(i).caracter);
                    }
                }
                
           //for(int i=0;i<lista.size();i++){
                //JOptionPane.showInputDialog(lista.get(i).lexema);
               //if(lista.get(i).tipo.compareTo("Identificador")==0 && lista.get(i+1).tipo.compareTo("apuntador")==0 &&lista.get(i+1).lexema.compareTo("CONJ")!=0){
               //    i++;
               //    //JOptionPane
               //    String expresion="";
               //    while(lista.get(i).tipo.compareTo(";")==0){
               //        expresion+=lista.get(i).lexema;
               //        i++;
               //    }
               //    JOptionPane.showInputDialog("el token es:" +expresion);
               //}
            //}        
        }
        
        
        else{
            JOptionPane.showInputDialog("Si tiene errores lexicos");
            for(int j=0;j<listaerror.size();j++){
                JOptionPane.showInputDialog(listaerror.get(j).tokenlexico);
            }
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
